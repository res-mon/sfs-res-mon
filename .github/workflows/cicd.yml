name: Build and Deploy

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      # Add caching for Bun dependencies
      - name: Cache Bun Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install Frontend Dependencies
        run: bun install

      - name: Install Backend Dependencies
        run: go mod download

      # Add security scanning for dependencies
      - name: Security Scan Dependencies
        uses: snyk/actions/node@master
        continue-on-error: true
        with:
          args: --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run Type Check
        run: bun run type-check

      - name: Run Format Check
        run: bun run format-check

      # Add test step
      # - name: Run Tests
      #   run: bun run test || echo "No tests specified - continuing"

      - name: Build Fullstack Application
        run: bun run build

      - name: Run Lint Check
        run: bun run lint-check

      - name: Upload Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Upload Go Binaries
        uses: actions/upload-artifact@v4
        with:
          name: go-binaries
          path: |
            simple-frontend-stack

  # Add CodeQL security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  deploy-pages:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{steps.deployment.outputs.page_url}}
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Download Frontend Artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Copy index.html to 404.html for SPA fallback
        run: cp dist/index.html dist/404.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./dist"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-docker:
    needs: build
    name: Publish Docker Image
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v4

      # Extract version information
      - name: Extract Version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Packages
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.GH_PACKAGES_USERNAME }}
          password: ${{ secrets.GH_PACKAGES_PASSWORD }}
          registry: ghcr.io

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Scan Docker image for vulnerabilities
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          format: "table"
          exit-code: "0"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH"

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ghcr.io/yertools/simple-frontend-stack:${{ steps.version.outputs.TAG }}
            ghcr.io/yertools/simple-frontend-stack:latest
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/386,linux/riscv64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
